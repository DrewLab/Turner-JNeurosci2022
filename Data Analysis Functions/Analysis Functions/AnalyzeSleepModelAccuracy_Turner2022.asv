function [Results_PupilSleepModel,Results_PhysioSleepModel,Results_CombinedSleepModel] = AnalyzeSleepModelAccuracy_Turner2022(animalID,rootFolder,delim,Results_PupilSleepModel,Results_PhysioSleepModel,Results_CombinedlSleepModel)
%________________________________________________________________________________________________________________________
% Written by Kevin L. Turner
% The Pennsylvania State University, Dept. of Biomedical Engineering
% https://github.com/KL-Turner
%
% Purpose: train/validate machine learning classifier using bootstrapped random forest
%________________________________________________________________________________________________________________________

dataLocation = [rootFolder delim 'Data' delim animalID delim 'Bilateral Imaging'];
cd(dataLocation)
% load resting baseline file
baselineDataFileStruct = dir('*_RestingBaselines.mat');
baselineDataFiles = {baselineDataFileStruct.name}';
baselineDataFileID = char(baselineDataFiles);
load(baselineDataFileID)
% go to animal's data location
dataLocation = [rootFolder delim 'Data' delim animalID delim 'Training Data'];
cd(dataLocation)
% character list of all ProcData files
procDataFileStruct = dir('*_ProcData.mat');
procDataFiles = {procDataFileStruct.name}';
procDataFileIDs = char(procDataFiles);
% % prepare pupil training data by updating parameters
% AddPupilSleepParameters_Turner2022(procDataFileIDs,RestingBaselines)
% CreatePupilModelDataSet_Turner2022(procDataFileIDs)
% UpdatePupilTrainingDataSet_Turner2022(procDataFileIDs)
% % prepare physio training data by updating parameters
% AddSleepParameters_Turner2022(procDataFileIDs,RestingBaselines,'manualSelection')
% CreateModelDataSet_Turner2022(procDataFileIDs)
% UpdateTrainingDataSets_Turner2022(procDataFileIDs)
% training data file IDs
pupilTrainingDataFileStruct = dir('*_PupilTrainingData.mat');
pupilTrainingDataFiles = {pupilTrainingDataFileStruct.name}';
pupilTrainingDataFileIDs = char(pupilTrainingDataFiles);
% only use training files that match those of the pupil
for aa = 1:size(pupilTrainingDataFileIDs)
    trainingDataFileIDs(aa,:) = strrep(pupilTrainingDataFileIDs(aa,:),'Pupil','');
end
% load each updated training set and concatenate the data into table
pupilJoinedTable = []; physioJoinedTable = []; combinedJoinedTable = [];
for bb = 1:size(pupilTrainingDataFileIDs,1)
    pupilTrainingTableFileID = pupilTrainingDataFileIDs(bb,:);
    load(pupilTrainingTableFileID)
    pupilJoinedTable = vertcat(pupilJoinedTable,pupilTrainingTable);
    trainingTableFileID = trainingDataFileIDs(bb,:);
    load(trainingTableFileID)
    physioJoinedTable = vertcat(physioJoinedTable,pupilTrainingTable);
    combinedJoinedTable = vertcat(combinedJoinedTable,horzcat(physioJoinedTable(:,1:end - 1),pupilJoinedTable));
end
shuffleSeed = randperm(size(pupilJoinedTable,1));
%% pupil model - separate the manual scores into 3 groups based on arousal classification
pupilJoinedAwakeTable = []; pupilJoinedNREMTable = []; pupilJoinedREMTable = [];
pupilRandomTable = pupilJoinedTable(shuffleSeed,:);
for aa = 1:size(pupilRandomTable,1)
    if strcmp(pupilRandomTable.behavState{aa,1},'Not Sleep') == true
        pupilJoinedAwakeTable = vertcat(pupilJoinedAwakeTable,pupilRandomTable(aa,:));
    elseif strcmp(pupilRandomTable.behavState{aa,1},'NREM Sleep') == true
        pupilJoinedNREMTable = vertcat(pupilJoinedNREMTable,pupilRandomTable(aa,:));
    elseif strcmp(pupilRandomTable.behavState{aa,1},'REM Sleep') == true
        pupilJoinedREMTable = vertcat(pupilJoinedREMTable,pupilRandomTable(aa,:));
    end
end
pupilJoinedTableOdd = vertcat(pupilJoinedAwakeTable(1:2:end,:),pupilJoinedNREMTable(1:2:end,:),pupilJoinedREMTable(1:2:end,:));
pupilTrainingTable = pupilJoinedTableOdd(randperm(size(pupilJoinedTableOdd,1)),:);
pupilJoinedTableEven = vertcat(pupilJoinedAwakeTable(2:2:end,:),pupilJoinedNREMTable(2:2:end,:),pupilJoinedREMTable(2:2:end,:));
pupilTestingTable = pupilJoinedTableEven(randperm(size(pupilJoinedTableEven,1)),:);
% train on odd data
pupilXtraining = pupilTrainingTable(:,1:end - 1);
pupilYtraining = pupilTrainingTable(:,end);
% test on even data
pupilXtesting = pupilTestingTable(:,1:end - 1);
pupilYtesting = pupilTestingTable(:,end);
% random forest
iterations = 100;
numTrees = 128;
bestAccuracy = 0;
for aa = 1:iterations
RF_MDL = TreeBagger(numTrees,pupilXtraining,pupilYtraining,'Method','Classification','Surrogate','all','OOBPrediction','on','ClassNames',{'Not Sleep','NREM Sleep','REM Sleep'});
% determine the misclassification probability (for classification trees) for out-of-bag observations in the training data
outOfBagError = oobError(RF_MDL,'Mode','Ensemble');
% use the model to generate a set of predictions
[pupilTestingPredictions,~] = predict(RF_MDL,pupilXtesting);
% save labels for later confusion matrix
Results_PupilSleepModel.(animalID).pupil.mdl = RF_MDL;
Results_PupilSleepModel.(animalID).pupil.outOfBagError = outOfBagError;
Results_PupilSleepModel.(animalID).pupil.trueTrainingLabels = pupilYtraining.behavState;
Results_PupilSleepModel.(animalID).pupil.predictedTrainingLabels = trainingPredictions;
Results_PupilSleepModel.(animalID).pupil.trueTestingLabels = pupilYtesting.behavState;
Results_PupilSleepModel.(animalID).pupil.predictedTestingLabels = pupilTestingPredictions;
% confusion chart
RF_confMat = figure;
CM = confusionchart(pupilYtesting.behavState,pupilTestingPredictions);
CM.ColumnSummary = 'column-normalized';
CM.RowSummary = 'row-normalized';
CM.Title = [animalID ' Testing Data'];
confVals = CM.NormalizedValues;
totalScores = sum(confVals(:));
modelAccuracy = (sum(confVals([1,5,9])/totalScores))*100;
CM.Title = {'Pupil RF',['total accuracy: ' num2str(modelAccuracy) ' (%)']};
if modelAccuracy > bestAcc
end
%% save data
cd([rootFolder delim])
save('Results_PupilSleepModelTEST.mat','Results_PupilSleepModel')
% save figure
savefig(RF_confMat,[animalID '_ConfusionMatrix']);
close(RF_confMat)

end
